{"version":3,"sources":["components/Forcast/DirectionForecastsItem.tsx","components/Forcast/DirectionForecasts.tsx","models/Line.ts","components/Forcast/Forecast.tsx","components/StationList/StationList.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["DirectionForecastsItem","props","className","tram","destinationStation","name","isDue","minutes","DirectionForecasts","Line","direction","forecasts","length","map","index","key","Forecast","state","forecast","loading","error","fetch","this","match","params","abbreviation","then","response","json","setState","catch","style","station","line","toString","Red","borderColor","irishName","inboundTrams","outboundTrams","message","React","Component","withRouter","StationList","stations","exact","to","activeClassName","filter","s","toLowerCase","borderLeftColor","App","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.5ab8cbce.chunk.js","sourcesContent":["import React from 'react';\nimport './DirectionForecastsItem.scss';\nimport TramForecast from '../../models/TramForecast';\n\n\ninterface DirectionForecastsItemProps {\n  tram: TramForecast\n}\n\nfunction minutesDue(tram: TramForecast) {\n  return tram.isDue ? \"Due\" : tram.minutes + \" mins\"\n}\n\nfunction DirectionForecastsItem(props: DirectionForecastsItemProps) {\n  return (\n    <li className=\"direction-forcast-item\">\n      <div className=\"destination\">{props.tram.destinationStation.name}</div>\n      <div className=\"minutes\">{minutesDue(props.tram)}</div>\n    </li>\n  );\n}\n\nexport default DirectionForecastsItem;\n","import React from 'react';\nimport './DirectionForecasts.scss';\nimport TramForecast from '../../models/TramForecast';\nimport DirectionForecastsItem from './DirectionForecastsItem';\n\ninterface DirectionForecastsProps {\n  direction: string,\n  forecasts: TramForecast[]\n}\n\nfunction DirectionForecasts(props: DirectionForecastsProps) {\n  return (\n    <section className=\"direction-forecast\">\n      <h2>{props.direction}</h2>\n      <ul>\n        {props.forecasts.length === 0 &&\n          <li>No Trams Forcast</li>}\n        {props.forecasts.map((tram, index) =>\n          <DirectionForecastsItem key={index} tram={tram} />)}\n      </ul>\n    </section>\n  );\n}\n\nexport default DirectionForecasts;\n","enum Line {\n    Red,\n    Green\n}\n\nexport default Line;","import React from 'react';\nimport './Forecast.scss';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport StationForecast from '../../models/StationForecast';\nimport DirectionForecasts from './DirectionForecasts';\nimport Line from '../../models/Line';\n\ninterface ForecastRouteProps {\n  abbreviation: string,\n}\n\ninterface ForecastProps extends RouteComponentProps<ForecastRouteProps> {\n}\n\ninterface ForecastState {\n  loading: boolean,\n  forecast: StationForecast,\n  error: boolean\n}\n\n\nclass Forecast extends React.Component<ForecastProps, ForecastState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      forecast: {} as StationForecast,\n      loading: true,\n      error: false\n    }\n  }\n\n  componentDidMount() {\n    fetch(`https://luasapifunction.azurewebsites.net/api/stations/${this.props.match.params.abbreviation}/forecast`)\n      .then(response => response.json())\n      .then(response =>\n        this.setState({\n          loading: false,\n          forecast: response\n        }))\n      .catch(error =>\n        this.setState({\n          loading: false,\n          error: true\n        }));\n  }\n\n  render() {\n    return (\n      <div className=\"forecast\">\n        <header>\n          {/* <Link to={`/line/${!this.state.loading && this.state.forecast.station.line}`}>Back</Link> */}\n          <h1 style={!this.state.loading && this.state.forecast.station.line.toString() === Line[Line.Red] ? { borderColor: '#f44336' } : { borderColor: '#4caf50' }}>\n            {(this.state.loading && this.props.match.params.abbreviation)\n              || this.state.forecast.station.name} <span>{!this.state.loading && this.state.forecast.station.irishName}</span></h1>\n        </header>\n\n        <main>\n          {this.state.loading &&\n            <h1>Loading...</h1>}\n\n          {this.state.error &&\n            <h1>Error getting data</h1>}\n\n          {!this.state.loading &&\n            <div>\n              <DirectionForecasts direction={this.state.forecast.station.line.toString() === Line[Line.Red] ? \"Eastbound\" : \"Northbound\"} forecasts={this.state.forecast.inboundTrams} />\n              <DirectionForecasts direction={this.state.forecast.station.line.toString() === Line[Line.Red] ? \"Westbound\" : \"Southbound\"} forecasts={this.state.forecast.outboundTrams} />\n            </div>}\n\n          <h3 className=\"message\">{!this.state.loading && this.state.forecast.message}</h3>\n        </main>\n      </div>\n    );\n  }\n};\n\nexport default withRouter(Forecast);\n","import React from 'react';\nimport './StationList.scss';\nimport { Link, RouteComponentProps, withRouter, NavLink } from 'react-router-dom';\nimport Station from '../../models/Station';\nimport Line from '../../models/Line';\n\n\ninterface StationListRouteProps {\n  line: string,\n}\n\ninterface StationListProps extends RouteComponentProps<StationListRouteProps> {\n}\n\ninterface StationListState {\n  stations: Station[],\n  loading: boolean,\n  error: boolean\n}\n\n\nclass StationList extends React.Component<StationListProps, StationListState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      stations: [] as Station[],\n      loading: true,\n      error: false\n    }\n  }\n\n  componentDidMount() {\n    fetch(`https://luasapifunction.azurewebsites.net/api/stations`)\n      .then(response => response.json())\n      .then(response =>\n        this.setState({\n          loading: false,\n          stations: response\n        }))\n      .catch(error =>\n        this.setState({\n          loading: false,\n          error: true\n        }));\n  }\n\n  render() {\n    return (\n      <div className=\"station-list\">\n        <nav className=\"colour-nav\">\n          <NavLink exact to={'/line/Red'} activeClassName=\"active-line\">Red</NavLink>\n          <NavLink exact to={'/line/Green'} activeClassName=\"active-line\">Green</NavLink>\n        </nav>\n        <h2>{this.state.loading && \"Loading...\"}</h2>\n        <nav className=\"list\">\n          <ul>\n            {\n              !this.state.loading &&\n              this.state.stations\n                .filter(s => s.line.toString().toLowerCase() === this.props.match.params.line.toString().toLowerCase())\n                .map(station =>\n                  <Link to={`/station/${station.abbreviation}`} key={station.abbreviation}>\n                    <li style={station.line.toString() === Line[Line.Red] ? { borderLeftColor: '#f44336' } : { borderLeftColor: '#4caf50' }}>\n                      {station.name}\n                    </li>\n                  </Link>)\n            }\n          </ul>\n        </nav>\n      </div>\n    );\n  }\n};\n\nexport default withRouter(StationList);\n","import React from 'react';\nimport './App.scss';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom';\nimport Forecast from '../Forcast/Forecast';\nimport StationList from '../StationList/StationList';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/station/:abbreviation\" component={Forecast} />\n\n          <Route exact path=\"/line/:line\" component={StationList} />\n\n          <Route exact path=\"/\">\n            <Redirect to=\"/line/Red\" />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}